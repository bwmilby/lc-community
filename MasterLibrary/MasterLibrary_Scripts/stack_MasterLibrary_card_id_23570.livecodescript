Script "stack_MasterLibrary_card_id_23570"

/*
# Name: card "Testing Playground" of stack "MasterLibrary"
# ID: card id 23570 of stack "MasterLibrary"
*/


on mouseup
   put the short name of the target into jump
   switch jump
      case "Test"
         doit
         break
   end switch
end mouseup

/*
g    Global variable                                       gMyGlobal
t    Local ("temporary") variable                    tMyVar
s    Script-local var                                       sMyVar
p    Parameter                                              pMyParam
k    Constant                                                 kMyNumber
u    User-defined (or custom) properties      uMyProp
*/

-- begin xxx
-- end xxx
/* xxx yyy
Syntax:
Examples:
Description:
Source:
xxx */
/* Include
*/


-- Â°

on doit
   alex
end doit








function sortArray @pArray, sortMode
   -- sort the values of an array, returning a numerically-keyed array
   --   whose values increase as the keys increase
   -- call it as follows
   --   put sortArray(tArray) into sortedArray
   -- pArray is referenced to avoid duplicating large arrays in memory
   --    but pArray is not changed by this function
   -- sortMode = {"text"|"textCaseSens"|"numeric"|"dateTime"}
   --    textCaseSens sets caseSensitive to true before sorting by text
   --    if sortMode = empty, defaults to numeric
   -- not sure who wrote this

   if sortMode = empty then put "numeric" into sortMode
   # create a list of the array entry values
   put the keys of pArray into keyList
   repeat for each line k in keyList
      put pArray[k] & cr after valueList
   end repeat
   delete char -1 of valueList
   # sort the list as directed
   switch sortMode
      case "textCaseSens"
         set the casesensitive to true
      case "text"
         sort lines of valueList
         break
      case "numeric"
         sort lines of valueList numeric
         break
      case "dateTime"
         sort lines of valueList dateTime
         break
   end switch
   # transform the sorted list back to a numerically indexed array
   split valueList by return
   return valueList
end sortArray

<?lc
##
# -------------------------------------------------------------------
# FASTJSON v0.4.1
# -------------------------------------------------------------------
#
# Bob Hall
# October 18, 2015
#
# By combining the best of easyjson and libjson and adding in
# performance enhancements, fastjson improves the speed of encoding
# and decoding Livecode arrays to/from JSON.
#
# Credit goes first to Mark Smith for creating the original libjson
# library and to Igor de Oliveira Couto who created the also excellent
# easyJson library.
#
# I am combining routines from both of these libraries to give us
# a decent boost in performance for JSON to/from Array needs.
# Yes, you can go faster than this with an custom coded extension.
# But I find the speed of this library to be pretty impressive.
#
# -------------------------------------------------------------------
# Instructions
# -------------------------------------------------------------------
#
# There are 3 calls that you will make from your Livecode scripts.
#
#     arrayToJson(pArrayData, keepNumeric)
#     jsonToArray(pJsonData, asUnicode, skipValidation)
#     isJson(pJsonData)
#
# NOTE:
# You will also find the following for compatibilty with existing
# easyJson scripts
#
#     arrayFromJson(pJsonData) (NOT TESTED)
#     jsonFromArray(pArrayData) (NOT TESTED)
#
# All other functions and commands in this script are for local use
# only.
#
# To use this library in a Stack I would suggest creating a substack
# of your main project named fastJson. Copy and paste the text of
# fastjson.lc minus the first line (<?lc) into the stack script of
# your new substack. In the preOpenStack handler of your main stack:
#
#     start using stack "fastJson"
#
# For livecode server use, include "fastjson.lc" in your server
# script.
#
# -------------------------------------------------------------------
#
##

# DECLARE SCRIPT LOCAL VARIABLES
local sOutputUnicode=""
local sJson=""
local sIndex=0
local sNumTokens=0

##
# -------------------------------------------------------------------
#  JSON to Array
# -------------------------------------------------------------------
# Convert a valid JSON data structure to a multi-dimensional Livecode
# array.
#
# Prototype:
#
#     put jsonToArray( tJsonData, false, true ) into tArrayData
#
##
function jsonToArray pJson, asUnicode, pSkipValidation
   local tJson = ""
   local tArray = ""

   put asUnicode is true into sOutputUnicode
   put jsonToUtf8(pJson) into tJson

   if tJson begins with "fastJson-error" then return tJson

   if pSkipValidation then
      tokenize tJson
   else
      if not isJson(tJson) then -- isJson will tokenize tJson for us
         return false
         //else
         //tokenize tJson
      end if
   end if

   //if the result is not empty then return the result
   put 0 into sIndex
   if sJson[1] = "[" then
      add 1 to sIndex
      put jArraytoArray() into tArray
   else
      put jObjectToArray() into tArray
   end if

   put empty into sJson
   return tArray
end jsonToArray

##
#
#  Included for compatibility with easyJson scripts
#
##
function arrayFromJson pJson
   return jsonToArray(pJson)
end arrayFromJson

##
# -------------------------------------------------------------------
#  Array To JSON
# -------------------------------------------------------------------
# Convert a multi-dimensional Livecode array to a valid JSON data
# structure.
#
# Prototype:
#
#     put arrayToJson( tArrayData ) into tJsonData
#
##
function arrayToJson pArray keepNumeric
  local tJSON
  local tValue
  local tKey

   if pArray is not an array then return "Parser Error: parameter given is not an array."
   if isNumericalArray(pArray) and keepNumeric is not true then
      # the array's keys are all *numerical*, so the root element will be a JSON *array*
      # if keepNumeric is true, then the keys will remain numeric keys
      put "[" into tJSON
      repeat for each element tValue in pArray
         put jsonValue(tValue) & comma after tJSON
      end repeat
      put "]" into the last char of tJSON
   else
      # the array's keys are not all numerical, so the root element will be a JSON *object*
      put "{" into tJSON
      repeat for each key tKey in pArray
         # all JSON object keys are double-quoted strings:
         put quote & tKey & quote & ":" & jsonValue(pArray[tKey]) & comma after tJSON
      end repeat
      put "}" into the last char of tJSON
   end if
   return tJSON
end arrayToJson

##
#
#  Included for compatibility with easyJson scripts
#
##
function jsonFromArray pJson
   return arrayToJson(pJson)
end jsonFromArray

##
# -------------------------------------------------------------------
#  Validate JSON data structure
# -------------------------------------------------------------------
# Validates a JSON data structure
#
#
# Prototype:
#
#     if isJson( tJsonData ) then
#        put "Valid JSON" into tTemp
#     else
#        put "ERROR! Not Valid JSON"
#     end if
#
##
function isJson pJson
   local n

   tokenize pJson
   /*
   repeat for each element tToken in sJson
      if tToken is in "{[" then add 1 to tDepth
      if tToken is in "}]" then subtract 1 from tDepth
   end repeat

   if tDepth <> 0 then return false
   */
   put 2 into n
   repeat for each element tToken in sJson
      --repeat with n = 1 to sNumTokens - 1
      if (sJson[n-1] is not in "{}[],:") and (sJson[n] is not in "{}[],:") then
         put sJson[n-3] & return & sJson[n-2] &  return & sJson[n-1] &  return & sJson[n] &  return & sJson[n+1] &  return


         return false
      end if
      add 1 to n
   end repeat

   return true
end isJson

/*
This was the original tokeninze code from libJson commented out for now.
This code will be removed eventually.

Bob Hall (2015-OCT-02)

private command tokenizeJson pJson
   put empty into sJson
   put 0 into sIndex
   put 0 into sNumTokens

   # escaped quotes < \" > and reverse-solidus < \\ > will confuse the tokenizer
   # so we replace them with "\u0022" and "\u005C" which we'll unescape
   # with all the other unescapes when we parse - jsonDecode()
   replace "\\" with "\u005C" in pJson
   replace "\" & quote with "\u0022" in pJson

   put 0 into tDepth
   put empty into prevToken
   repeat for each token tToken in pJson
      if tToken is in "+-" then
         # since "+" & "-" are rev tokens, but not jSon tokens,
         # we have to prepend them to the next token
         put tToken into prevToken
      else
         add 1 to sNumTokens
         put prevToken & tToken into sJson[sNumTokens]
         put empty into prevToken

         if tToken is in "{[" then add 1 to tDepth
         if tToken is in "}]" then subtract 1 from tDepth
      end if
   end repeat

   if tDepth <> 0 then return "fastJson-error: json malformed"
   repeat with n = 1 to sNumTokens - 1
      if (sJson[n] is not in "{}[],:") and (sJson[n + 1] is not in "{}[],:") then return "fastJson-error: json malformed"
   end repeat
end tokenizeJson
*/

private function jObjectToArray
   local tArray
   local tName

   put empty into tArray

   -- using a repeat forever with a conditional got small improvement
   repeat forever
      --repeat while sIndex <= sNumTokens
      if sIndex > sNumTokens then exit repeat
      add 1 to sIndex

      switch sJson[sIndex]
         case "{"
            put jsonDecode(sJson[sIndex + 1]) into tName
            add 1 to sIndex -- we can skip ahead
            break
         case ":"
            if sJson[sIndex + 1] is not "{" then
               put jsonDecode(sJson[sIndex + 1]) into tArray[tName]
            else
               put jObjectToArray() into tArray[tName]
            end if
            break
         case "}"
            return tArray
            break
         case "["
            put jArrayToArray() into tArray[tName]
            break
         case comma -- must be after "[" or will mess up jArrays
            put jsonDecode(sJson[sIndex + 1]) into tName
            add 1 to sIndex -- we can skip ahead
            break
      end switch

   end repeat
   return tArray
end jObjectToArray

private function jArrayToArray
   local tKey=0
   local tArray=""

   repeat while sIndex <= sNumTokens
      add 1 to sIndex

      switch sJson[sIndex]
         case "]"
            return tArray
            break
         case comma
            next repeat
            break
         case "{"
            add 1 to tKey
            subtract 1 from sIndex
            put jObjectToArray() into tArray[tKey]
            break
         case "["
            add 1 to tKey
            put jArrayToArray() into tArray[tKey]
            break
         default
            add 1 to tKey
            put jsonDecode(sJson[sIndex]) into tArray[tKey]
      end switch
   end repeat
end jArrayToArray

private function jsonToUtf8 @pJson
   local tNulls = "1111"
   local tCounter = "1,2,3,4"
   local bigEndian

   ##
   # Repeat for each is faster than repeat with
   #
   repeat for each element n in tCounter
      --repeat with n = 1 to 4
      if (byte n of pJson is null) then put 0 into char n of tNulls
   end repeat

   put (char 1 of (binaryencode("I",1)) is null) into bigEndian

   switch tNulls
      case "1111"  -- UTF-8
         return pJson
         break
      case "0101"  -- UTF-16BE
         if bigEndian then
            return utf8encode(pJson, true)
         else
            return utf8encode(swapEndianness(pJson), true)
         end if
         break
      case "1010"  -- UTF-16LE
         if not bigEndian then
            return utf8encode(pJson, true)
         else
            return utf8encode(swapEndianness(pJson), true)
         end if
         break
      case "0001"  -- UTF-32BE
         return "fastJson-error: 4 byte unicode, can't decode"
         break
      case "1000"  -- UTF-32LE
         return "fastJson-error: 4 byte unicode, can't decode"
         break
   end switch
end jsonToUtf8

private function utf8encode pString, pIsUnicode
   if pIsUnicode then
      return unidecode(pString, "UTF8")
   else
      return unidecode(uniencode(pString),"UTF8")
   end if
end utf8encode

private function utf8decode pString, pToUnicode
   if pToUnicode then
      return uniencode(pString,"UTF8")
   else
      return unidecode(uniencode(pString,"UTF8"))
   end if
end utf8decode

private function jsonDecode pString
   local tCode
   local tChar

   switch pString
      case "false"
         return "false"
         break
      case "true"
         return "true"
         break
         #
         # SPECIAL CASE. Need to catch this in JSON or performace takes a hit.
         #
      case ""
         return empty
         break
      case "null"
         return empty
         break
      default
         if pString is a number then
            return pString
         else
            replace "\" & quote with quote in pString
            replace "\\" with "\" in pString
            replace "\b" with numtochar(8) in pString
            replace "\t" with numtochar(9) in pString
            replace "\f" with numtochar(12) in pString
            replace "\r" with numtochar(13) in pString
            replace "\n" with numtochar(10) in pString

            -- some more common unicode escapees
            replace "\u0022" with quote in pString
            replace "\u005C" with "\" in pString
            -- any others

            ##
            # REMOVED 10/15/2015 by BobH
            # Below causing issues with RTF escaped characters.
            # In general I am removing Unicode support for the time being.
            #
            ## if "\u" is in pString then put unicodeEscapes(pString) into pString

            ##
            # JSON encoders escape unicode characters as "\uHHHH",
            # where 'H' is a hexadecimal digit. Convert to UTF8
            #
            repeat while matchtext(pString,"\\u([0-9A-Fa-f]{4})",tCode)
               set the useunicode to true
               put unidecode(numtochar(baseconvert(tCode,16,10)),"UTF8") into tChar
               replace ("\u" & tCode) with tChar in pString
            end repeat

            if not sOutputUnicode then
               return utf8decode(pString)
            else
               return pString
            end if
         end if
   end switch
end jsonDecode

##
# REMOVED 10/16/2015 by BobH
# Removed this function. Replaced with code in Json string hanlding
#
/*
private function unicodeEscapes pString
   put false into inEsc
   repeat for each char c in pString
      add 1 to count
      put c after buffer

      if count < 2 then next repeat

      if buffer is "\u" then put true into inEscape

      if inEscape then
         if length(buffer) < 6 then
            next repeat
         else
            put numtochar(baseconvert(char 3 to 6 of buffer, 16, 10)) into buffer
            put false into inEscape
         end if
      else
         put char 1 of buffer after nString
         delete char 1 of buffer
      end if

   end repeat
   put buffer after nString
   return nString
end unicodeEscapes
*/

/*
This function checks the keys of a LiveCode array,
and returns TRUE if all the keys are numerical - otherwise, returns false.

@param pArray a LiveCode array
@return TRUE if the array's keys are all numerical, otherwise FALSE
*/
private function isNumericalArray @pArray
   local tKeys, aKey
   put the keys of pArray into tKeys
   /*
   # REMOVED 10/18/2015
   # the filter command returns true if there is a number in the string anywhere
   #
   filter tKeys without "[0-9]*"
   if the number of lines in tKeys > 0 then
      return false
   else
      return true
   end if
   */
   repeat for each line aKey in tKeys
      if aKey is not a number then
         -- as soon as we don't get a number, get outa here!
         return false
         exit isNumericalArray
      end if
   end repeat
   return true
end isNumericalArray

/*
This function takes a LiveCode value, and produces a string representing
a valid JSON 'value', as per http://www.json.org/.
@param pValue any LiveCode value: array, string, number, date, colour, boolean, etc.
@return a string representing a valid and comparable JSON 'value' - JSON values are:
        number, string, boolean, array or object.
        LiveCode 'empty' returns JSON 'null'.
*/
private function jsonValue pValue
   switch
      case pValue is an array
         # this allows us to have nested JSON objects and arrays:
         return arrayToJson(pValue)
         break
      case pValue is empty
         return "null"
         break
      case pValue is a boolean
         if pValue then return "true"
         else return "false"
         break
      case pValue is a number
         -- need to catch when a "number" starts with a 0
         -- decided to return this as a quoted string
         -- JSON lint throws an exception if a number starts with a 0
         if (character 1 of pValue = 0) and not (character 2 of pValue = ".") and (length(pValue) > 1) then
            return quote & pValue & quote
         end if
         -- there is an "anomoly" in LC where "inf" and "Infinity" are getting through "is a number"
         -- function. Not sure what the result will be but the code below will catch both.
         -- I have submitted the following bugs: 16160, 16162, 16163
         if char 1 of pValue is "i" then
            return quote & pValue & quote
         else
            return pValue
         end if
      default
         # any other value is processed as a string.
         # JSON strings require that certain characters be 'escaped' with a backslash:
         replace "\" with "\\" in pValue // the backslash itself
         replace quote with ("\" & quote) in pValue // the double quote
         replace "/" with "\/" in pValue // the (forward) slash
         replace tab with "\t" in pValue // the tab
         replace return with "\n" in pValue // the return
         return quote & pValue & quote
   end switch
end jsonValue

private command tokenize @pJson
   local prevToken

   put empty into sJson
   put 0 into sNumTokens

   # escaped quotes < \" > and reverse-solidus < \\ > will confuse the tokenizer
   # so we replace them with "\u0022" and "\u005C" which we'll unescape
   # with all the other unescapes when we parse - jsonDecode()
   replace "\\" with "\u005C" in pJson
   replace "\" & quote with "\u0022" in pJson

   put 1 into sIndex
   put "" into prevToken
   repeat for each token tToken in pJson
      ## I've removed the following.
      ## debugging an Json where we have
      ## "name":"-",
      ## this appears to trip up the tokenizer
      /*
      if tToken is in "+-" then -- needed for numbers in json
         # since "+" & "-" are rev tokens, but not jSon tokens,
         # we have to prepend them to the next token
         put tToken into prevToken
      else*/

      switch
         case tToken is in "+-"
            # since "+" & "-" are rev tokens, but not jSon tokens,
            # we have to prepend them to the next token
            put tToken after prevToken
            break
         case (prevToken is in "+-") and (tToken is not a number)
            add 1 to sNumTokens
            put prevToken into sJson[sNumTokens]
            put "" into prevToken
            add 1 to sNumTokens
            put tToken into sJson[sNumTokens]
            break
         default
            add 1 to sNumTokens
            put prevToken & tToken into sJson[sNumTokens]
            put "" into prevToken
      end switch
    end repeat
end tokenize

function numTokens @pJson
   tokenize pJson

   return sNumTokens
end numTokens
